<span id='countdown'>{$remaining_time}</span>





<section class="container py-5">
    <h2 class="text-center mb-5" data-aos="fade-up">Frequently Asked Questions</h2>
    <div class="accordion" id="faqAccordion">
        <div class="accordion-item" data-aos="fade-up" data-aos-delay="100">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    How do I create a profile?
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#faqAccordion">
                <div class="accordion-body">
                    Creating a profile is easy! Just sign up, fill in your details, and start exploring opportunities.
                </div>
            </div>
        </div>
        <div class="accordion-item" data-aos="fade-up" data-aos-delay="200">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Is the platform free to use?
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#faqAccordion">
                <div class="accordion-body">
                    Yes, our platform is completely free for students and professionals. Employers may have premium options.
                </div>
            </div>
         </div>
        </div>
    </section>








views/dashboard.php 

    <?php
ini_set('session.use_only_cookies', 1);
ini_set('session.cookie_httponly', 1);
session_start();
session_regenerate_id(true); // Prevent session fixation attacks

if (!isset($_SESSION['user_id']) && !isset($_SESSION['stud_id'])) {
    header("Location: ../index.php");
    exit();
}

require '../config/dbcon.php';

$entity = $_SESSION['entity'] ?? null;
$name = "";
$role_name = "User"; // Default role

// Redirect if session data is inconsistent
if (($entity === 'student' && !isset($_SESSION['stud_id'])) || ($entity === 'user' && !isset($_SESSION['user_id']))) {
    header("Location: ../auth/login.php");
    exit();
}

try {
    if ($entity === 'student') {
        $stud_id = $_SESSION['stud_id'];
        $stmt = $conn->prepare("SELECT stud_first_name, stud_last_name, stud_email, institution FROM student WHERE stud_id = :stud_id LIMIT 1");
        $stmt->bindParam(':stud_id', $stud_id, PDO::PARAM_INT);
        $stmt->execute();
        $student = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($student) {
            $name = htmlspecialchars($student['stud_first_name'] . ' ' . $student['stud_last_name']);
        }
    } elseif ($entity === 'user') {
        $user_id = $_SESSION['user_id'];
        $stmt = $conn->prepare("
            SELECT u.user_first_name, u.user_last_name, r.role_title 
            FROM user u
            LEFT JOIN role r ON u.role_id = r.role_id
            WHERE u.user_id = :user_id
            LIMIT 1
        ");
        $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);
        $stmt->execute();
        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($user) {
            $name = htmlspecialchars($user['user_first_name'] . ' ' . $user['user_last_name']);
            $role_name = htmlspecialchars($user['role_title'] ?? 'User');
        }
    }
} catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    die("Something went wrong. Please try again later.");
}

// Redirect admin users immediately
if ($entity === 'user' && isset($user) && $role_name === 'Admin') {
    header("Location: ../admin/admin.php");
    exit();
}
// Redirect admin users immediately
if ($entity === 'user' && isset($user) && $role_name === 'Employer') {
    header("Location: ../admin/admin.php");
    exit();
}
// Redirect admin users immediately
if ($entity === 'user' && isset($user) && $role_name === 'Professional') {
    header("Location: ../admin/admin.php");
    exit();
}
// Redirect admin users immediately
if ($entity === 'user' && isset($user) && $role_name === 'Moderator') {
    header("Location: ../admin/admin.php");
    exit();
}

if ($entity === 'student' && isset($student)) {
    header("Location: ../admin/admin.php");
    exit();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dashboard</title>
</head>
<body>
    <h1>Welcome, <?= $name; ?>!</h1>

    <?php if ($entity === 'student' && isset($student)): ?>
        <h2>Student Dashboard</h2>
        <p>You are a student. Here are your details:</p>
        <ul>
            <li>Email: <?= htmlspecialchars($student['stud_email']); ?></li>
            <li>Institution: <?= htmlspecialchars($student['institution']); ?></li>
        </ul>
        <a href="student_profile.php">Edit Profile</a><br>
        <a href="view_jobs.php">View Job Postings</a><br>
    <?php elseif ($entity === 'user' && isset($user)): ?>
        <h2><?= $role_name; ?> Dashboard</h2>
        <p>You are logged in as a <?= $role_name; ?>.</p>
        <?php if ($role_name === 'Employer'): ?>
            <a href="post_job.php">Post a Job</a><br>
            <a href="view_applications.php">View Applications</a><br>
        <?php elseif ($role_name === 'Professional'): ?>
            <a href="update_profile.php">Update Profile</a><br>
            <a href="view_jobs.php">View Job Postings</a><br>
        <?php elseif ($role_name === 'Moderator'): ?>
            <a href="manage_forum.php">Manage Forum</a><br>
        <?php endif; ?>
    <?php endif; ?>

    <a href="../auth/logout.php">Logout</a>
</body>
</html>






.main-content {
            margin-left: 250px; /* Adjust this when sidebar is open */
            padding: 20px;
            transition: margin-left 0.3s ease;
        }

        .sidebar.collapsed + .main-content {
            margin-left: 60px; /* Adjust when sidebar is collapsed */
        }









        document.addEventListener("DOMContentLoaded", function () {
    // Edit User Modal - Pre-fill data from backend
    document.querySelectorAll(".btn-action").forEach(button => {
        button.addEventListener("click", function () {
            let row = this.closest("tr"); // Get the row of the clicked button
            let actorId = row.querySelector("td:first-child").textContent.trim();
            
            fetch(`../controllers/get_user.php?user_id=${actorId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        console.error(data.error);
                        alert("Error: " + data.error);
                    } else {
                        document.getElementById("editUserFirstName").value = data.first_name || '';
                        document.getElementById("editUserMiddleName").value = data.middle_name || '';
                        document.getElementById("editUserLastName").value = data.last_name || '';
                        document.getElementById("editUserEmail").value = data.email || '';

                        // Role handling
                        let roleDropdown = document.getElementById("editUserRole");
                        roleDropdown.value = data.role_id || ''; // Assign role_id
                        roleDropdown.disabled = !data.role_id; // Disable if no role

                        if (!data.role_id) {
                            roleDropdown.innerHTML = '<option selected>Cannot be edited</option>';
                            roleDropdown.disabled = true;
                        } else {
                            roleDropdown.value = data.role_id || '';
                        }

                        document.getElementById("editUserStatus").value = data.status || '';
                        document.getElementById("editUserId").value = actorId; // Store ID in hidden field
                    }
                })
                .catch(error => {
                    console.error("Error fetching user data:", error);
                    alert("Failed to load user data.");
                });
        });
    });

    // Save Changes - Edit User AJAX
    document.getElementById("saveUserChanges").addEventListener("click", function () {
        let actorId = document.getElementById("editUserId").value;
        let firstName = document.getElementById("editUserFirstName").value.trim();
        let middleName = document.getElementById("editUserMiddleName").value.trim();
        let lastName = document.getElementById("editUserLastName").value.trim();
        let email = document.getElementById("editUserEmail").value.trim();
        let roleId = document.getElementById("editUserRole").value.trim(); // Now sends role_id
        let status = document.getElementById("editUserStatus").value.trim();

        let saveButton = document.getElementById("saveUserChanges");
        saveButton.disabled = true; // Disable to prevent multiple clicks

        fetch("../controllers/admin_user_management.php", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: new URLSearchParams({
                edit_id: actorId,
                first_name: firstName,
                middle_name: middleName,
                last_name: lastName,
                email: email,
                role: roleId,
                status: status
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === "success") {
                alert("User updated successfully!");
                location.reload();
            } else {
                alert("Error: " + data.message);
            }
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Something went wrong. Please try again.");
        })
        .finally(() => {
            saveButton.disabled = false; 
        });
    });
});





DO EDIT USER DETAILS NEXT BRO




signuphandler backup
<?php
require '../config/dbcon.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        // Enable error reporting
        error_reporting(E_ALL);
        ini_set('display_errors', 1);

        // Validate and sanitize input
        $entity = $_POST['entity'] ?? null;
        $studno = $_POST['student_id'] ?? null;
        $email = filter_var($_POST['email'], FILTER_VALIDATE_EMAIL);
        if (!$email || !strpos($_POST['email'], '.')) {
            throw new Exception("Invalid email format. Please include a valid domain (e.g., user@example.com).");
        }        
        $password = $_POST['password'] ?? null;
        $first_name = trim($_POST['first_name'] ?? '');
        $middle_name = !empty(trim($_POST['middle_name'] ?? '')) ? trim($_POST['middle_name']) : null;
        $last_name = trim($_POST['last_name'] ?? '');

        if (!$email || empty($password) || empty($first_name) || empty($last_name)) {
            throw new Exception("Invalid input data.");
        }

        // ✅ **Step 1: Check if Email Exists**
        $emailCheckStmt = $conn->prepare("
            SELECT user_email FROM user WHERE user_email = :email 
            UNION 
            SELECT stud_email FROM student WHERE stud_email = :email
        ");
        // Check if the email already exists in the user or student table
        $checkEmailStmt = $conn->prepare("SELECT user_email FROM user WHERE user_email = :email UNION SELECT stud_email FROM student WHERE stud_email = :email");
        $checkEmailStmt->bindParam(':email', $email, PDO::PARAM_STR);
        $checkEmailStmt->execute();

        if ($checkEmailStmt->rowCount() > 0) {
            // Redirect back to the correct signup page
            if ($entity === "student") {
                header("Location: ../views/register_student.php?message=" . urlencode("Email already exists. Please use a different email.") . "&email=" . urlencode($email));
            } else {
                header("Location: ../views/register_user.php?message=" . urlencode("Email already exists. Please use a different email.") . "&email=" . urlencode($email));
            }
            exit();
        }


        // Hash the password using Argon2id
        $hashed_password = password_hash($password, PASSWORD_ARGON2ID);

        // **Start transaction only if entity is valid**
        if (in_array($entity, ['user', 'student'])) {
            $conn->beginTransaction();  

            if ($entity === 'user') {
                $role_id = intval($_POST['role_id'] ?? 0);
                $status = 'active';

                // Fetch role_title (user_type) from role table
                $roleStmt = $conn->prepare("SELECT role_title FROM role WHERE role_id = :role_id");
                $roleStmt->bindParam(':role_id', $role_id, PDO::PARAM_INT);
                $roleStmt->execute();
                $role = $roleStmt->fetch(PDO::FETCH_ASSOC);

                if (!$role) {
                    throw new Exception("Invalid role_id provided.");
                }

                $user_type = $role['role_title']; 

                // Insert user into database
                $stmt = $conn->prepare("INSERT INTO user (user_type, user_email, user_password, role_id, user_first_name, user_middle_name, user_last_name, `status`) 
                                        VALUES (:user_type, :email, :password, :role_id, :first_name,:middle_name,:last_name, :active)");
                $stmt->bindParam(':user_type', $user_type, PDO::PARAM_STR);
                $stmt->bindParam(':email', $email, PDO::PARAM_STR);
                $stmt->bindParam(':password', $hashed_password, PDO::PARAM_STR);
                $stmt->bindParam(':role_id', $role_id, PDO::PARAM_INT);
                $stmt->bindParam(':first_name', $first_name, PDO::PARAM_STR);
                if ($middle_name === null) {
                    $stmt->bindValue(':middle_name', null, PDO::PARAM_NULL);
                } else {
                    $stmt->bindValue(':middle_name', $middle_name, PDO::PARAM_STR);
                }                
                $stmt->bindParam(':last_name', $last_name, PDO::PARAM_STR);
                $stmt->bindParam(':active', $status, PDO::PARAM_STR);

                if (!$stmt->execute()) {
                    throw new Exception("Error inserting user.");
                }
            } elseif ($entity === 'student') {
                $institution = trim($_POST['institution'] ?? '');
                $status = 'active';
                if (empty($institution)) {
                    throw new Exception("Institution field is required.");
                }

                // Insert student into database
                $stmt = $conn->prepare("INSERT INTO student (stud_no, stud_email, stud_password, stud_first_name, stud_middle_name, stud_last_name, institution, `status`) 
                                        VALUES (:studno, :email, :password, :first_name, :middle_name, :last_name, :institution,:active)");
                $stmt->bindParam(':studno', $studno, PDO::PARAM_STR);
                $stmt->bindParam(':email', $email, PDO::PARAM_STR);
                $stmt->bindParam(':password', $hashed_password, PDO::PARAM_STR);
                $stmt->bindParam(':first_name', $first_name, PDO::PARAM_STR);
                if ($middle_name === null) {
                    $stmt->bindValue(':middle_name', null, PDO::PARAM_NULL);
                } else {
                    $stmt->bindValue(':middle_name', $middle_name, PDO::PARAM_STR);
                }
                $stmt->bindParam(':last_name', $last_name, PDO::PARAM_STR);
                $stmt->bindParam(':institution', $institution, PDO::PARAM_STR);
                $stmt->bindParam(':active', $status, PDO::PARAM_STR);

                if (!$stmt->execute()) {
                    throw new Exception("Error inserting student.");
                }
            }

            $entity_id = $conn->lastInsertId();
            if (!$entity_id) {
                throw new Exception("Failed to retrieve last inserted ID.");
            }            

            // Insert into actor table
            $stmt = $conn->prepare("INSERT INTO actor (entity_type, entity_id) VALUES (:entity, :entity_id)");
            $stmt->bindParam(':entity', $entity, PDO::PARAM_STR);
            $stmt->bindParam(':entity_id', $entity_id, PDO::PARAM_INT);

            if (!$stmt->execute()) {
                throw new Exception("Error inserting into actor table.");
            }

            $conn->commit(); 

            if ($entity === 'student') {
                header("Location: ../views/register_student.php?success=Registration successful! You can now log in.");
            } else {
                header("Location: ../views/register_user.php?success=Registration successful! You can now log in.");
            }
            exit();
            
        } else {
            throw new Exception("Invalid entity type.");
        }
    } catch (Exception $e) {
        if ($conn->inTransaction()) {
            $conn->rollBack();
        }

        error_log("Registration Error: " . $e->getMessage());

        $redirect_page = ($entity === 'student') ? '../register_student.php' : '../register_user.php';

        header("Location: " . $redirect_page . "?message=" . urlencode($e->getMessage()));
        exit();
    }
}

?>







-- Create the database
CREATE DATABASE IF NOT EXISTS career_platform;
USE career_platform;

-- Table: role
CREATE TABLE IF NOT EXISTS role (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_title VARCHAR(255) NOT NULL,
    role_description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL
);

-- Table: course
CREATE TABLE IF NOT EXISTS course (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    course_title VARCHAR(255) NOT NULL,
    course_description TEXT,
    deleted_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: student
CREATE TABLE IF NOT EXISTS student (
    stud_id INT AUTO_INCREMENT PRIMARY KEY,
    stud_no VARCHAR(255) UNIQUE NOT NULL,
    stud_first_name VARCHAR(255),
    stud_middle_name VARCHAR(255),
    stud_last_name VARCHAR(255),
    stud_gender ENUM('Male', 'Female', 'Other'),
    stud_date_of_birth DATE,
    graduation_yr YEAR,
    course_id INT,
    bio TEXT,
    resume_file VARCHAR(255),
    profile_picture VARCHAR(255),
    stud_email VARCHAR(255) UNIQUE NOT NULL,
    stud_password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    status VARCHAR(50),
    institution VARCHAR(255),
    FOREIGN KEY (course_id) REFERENCES course(course_id)
);

-- Table: user
CREATE TABLE IF NOT EXISTS user (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    user_first_name VARCHAR(255) NOT NULL,
    user_middle_name VARCHAR(255),
    user_last_name VARCHAR(255),
    user_email VARCHAR(255) UNIQUE NOT NULL,
    user_password VARCHAR(255) NOT NULL,
    role_id INT NOT NULL,
    user_type VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    picture_file VARCHAR(255),
    status VARCHAR(50),
    FOREIGN KEY (role_id) REFERENCES role(role_id)
);


-- Table: employer
CREATE TABLE IF NOT EXISTS employer (
    employer_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    company_name VARCHAR(255),
    job_title VARCHAR(255),
    status ENUM('Active', 'Suspended', 'Banned') DEFAULT 'Active', -- Added status column
    FOREIGN KEY (user_id) REFERENCES user(user_id)
);


-- Table: professional
CREATE TABLE IF NOT EXISTS professional (
    professional_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    current_job VARCHAR(255),
    company VARCHAR(255),
    yrs_of_experience INT,
    status ENUM('Active', 'Suspended', 'Banned') DEFAULT 'Active', -- Added status column
    bio TEXT,
    resume_file VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES user(user_id)
);

-- Table: skill_masterlist
CREATE TABLE IF NOT EXISTS skill_masterlist (
    skill_id INT AUTO_INCREMENT PRIMARY KEY,
    skill_name VARCHAR(255) NOT NULL,
    category VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL
);

-- Table: job_type
CREATE TABLE IF NOT EXISTS job_type (
    job_type_id INT AUTO_INCREMENT PRIMARY KEY,
    job_type_title VARCHAR(255) NOT NULL,
    job_type_description TEXT
);

-- Table: job_posting
CREATE TABLE IF NOT EXISTS job_posting (
    job_id INT AUTO_INCREMENT PRIMARY KEY,
    employer_id INT,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    location VARCHAR(255),
    job_type_id INT,
    salary DECIMAL(10, 2),
    img_url VARCHAR(255),
    posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NULL DEFAULT NULL,
    deleted_at TIMESTAMP NULL,
    moderation_status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    flagged BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (employer_id) REFERENCES employer(employer_id),
    FOREIGN KEY (job_type_id) REFERENCES job_type(job_type_id)
);


-- Table: job_skill
CREATE TABLE IF NOT EXISTS job_skill (
    job_skills_id INT AUTO_INCREMENT PRIMARY KEY,
    skill_id INT,
    job_id INT,
    importance ENUM('Low', 'Medium', 'High'),
    group_no INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (skill_id) REFERENCES skill_masterlist(skill_id),
    FOREIGN KEY (job_id) REFERENCES job_posting(job_id)
);

-- Table: stud_skill
CREATE TABLE IF NOT EXISTS stud_skill (
    user_skills_id INT AUTO_INCREMENT PRIMARY KEY,
    stud_id INT,
    skill_id INT,
    proficiency ENUM('Beginner', 'Intermediate', 'Advanced'),
    group_no INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (stud_id) REFERENCES student(stud_id),
    FOREIGN KEY (skill_id) REFERENCES skill_masterlist(skill_id)
);

-- Table: application_tracking
CREATE TABLE IF NOT EXISTS application_tracking (
    application_id INT AUTO_INCREMENT PRIMARY KEY,
    stud_id INT,
    job_id INT,
    application_status ENUM('Pending', 'Accepted', 'Rejected'),
    parent_application_id INT,
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (stud_id) REFERENCES student(stud_id),
    FOREIGN KEY (job_id) REFERENCES job_posting(job_id)
);

-- Table: skill_matching
CREATE TABLE IF NOT EXISTS skill_matching (
    match_id INT AUTO_INCREMENT PRIMARY KEY,
    user_skills_id INT,
    job_skills_id INT,
    match_score DECIMAL(5, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_skills_id) REFERENCES stud_skill(user_skills_id),
    FOREIGN KEY (job_skills_id) REFERENCES job_skill(job_skills_id)
);

-- Table: actor
CREATE TABLE IF NOT EXISTS actor (
    actor_id INT AUTO_INCREMENT PRIMARY KEY,
    entity_type ENUM('user', 'student') NOT NULL,
    entity_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL
);

-- Table: forum
CREATE TABLE IF NOT EXISTS forum (
    forum_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (created_by) REFERENCES actor(actor_id)
);

-- Table: forum_post
CREATE TABLE IF NOT EXISTS forum_post (
    post_id INT AUTO_INCREMENT PRIMARY KEY,
    forum_id INT,
    poster_id INT,
    content TEXT,
    up_count INT DEFAULT 0,
    posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (forum_id) REFERENCES forum(forum_id),
    FOREIGN KEY (poster_id) REFERENCES actor(actor_id)
);

-- Table: forum_comment
CREATE TABLE IF NOT EXISTS forum_comment (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT,
    commenter_id INT,
    content TEXT,
    commented_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    up_count INT DEFAULT 0,
    FOREIGN KEY (post_id) REFERENCES forum_post(post_id),
    FOREIGN KEY (commenter_id) REFERENCES actor(actor_id)
);

-- Table: notification
CREATE TABLE IF NOT EXISTS notification (
    notification_id INT AUTO_INCREMENT PRIMARY KEY,
    actor_id INT,
    message TEXT,
    is_read BOOLEAN DEFAULT FALSE,
    notification_type VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    action_url VARCHAR(255),
    reference_type VARCHAR(255),
    reference_id INT,
    FOREIGN KEY (actor_id) REFERENCES actor(actor_id)
);

-- Table: thread
CREATE TABLE IF NOT EXISTS thread (
    thread_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_group VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL
);

-- Table: message
CREATE TABLE IF NOT EXISTS message (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    content TEXT,
    is_read BOOLEAN DEFAULT FALSE,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    sender_id INT,
    receiver_id INT,
    thread_id INT,
    FOREIGN KEY (sender_id) REFERENCES actor(actor_id),
    FOREIGN KEY (receiver_id) REFERENCES actor(actor_id),
    FOREIGN KEY (thread_id) REFERENCES thread(thread_id)
);



CREATE TABLE IF NOT EXISTS thread_participants (
    participant_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    actor_id INT NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES thread(thread_id),
    FOREIGN KEY (actor_id) REFERENCES actor(actor_id),
    UNIQUE KEY (thread_id, actor_id)  -- Prevents duplicate participants in same thread
);












INSERT QUERIES

INSERT INTO role (role_title, role_description) VALUES
('Employer', 'User who posts job listings and manages hiring.'),
('Professional', 'User who applies for jobs and showcases skills.'),
('Moderator', 'User who moderates platform discussions and content.'),
('Admin', 'User with full access to manage the platform.');
